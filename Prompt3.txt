Question #3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example
Input: "aaabccdddda"

Output: "3ab2c4da"

PSEUDOCODE:
-I want to loop through and compare an element to the next element, if they are the same, then I want to log that and then compare to the next element until they no longer match. 
- I want to somehow skip over the ones that I've already compressed
-Then I want to convert the length of the items into a number and the name of the items

function compressString(string) {
  let arr = [];
  for(let i = 0; i < string.length; i ++) {
    let counter = 1;
    for(let e = i + 1; e < string.length; e ++) {
      if(string[e] === string[i]){
        counter ++;
      } else {
        break;
      }
    }
    if(counter > 1) {
    arr.push(`${counter}` + `${string[i]}`);
    } else {
      arr.push(`${string[i]}`);
    }
    i += counter - 1;
  }
  return arr.join("");
}

function recurseCompressString (string) {

  function compressRecursive(string, index, result) {
    if (index >= string.length) {
      return result;
    }

    let counter = 1;
    while (string[index] === string[index + counter]) {
      counter++;
    }

    if (counter > 1) {
      result += `${counter}${string[index]}`;
    } else {
      result += `${string[index]}`;
    }

    return compressRecursive(string, index + counter, result);
  }

  return compressRecursive(string, 0, "");
}

